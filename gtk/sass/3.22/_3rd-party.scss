// /*******************
//  * Lightdm-Greeter *
//  *******************/

%greeter_panel_window {
  background-image: image($panel_bg_color);
  color: $inverted_fg_color;
  box-shadow: none;
  font-weight: 700;
  text-shadow: none;

  &, &.background,
  > * > * { background-color: transparent; } // FIXME: ugly wildcard

  // avoid translucent top-bar
  &.osd { opacity: 1.0; } // >= 2.0.5
}

%greeter_panel_menubar {
  background-color: transparent;
  color: $inverted_fg_color;

  &:hover {
    color: $selected_fg_color;
    box-shadow: inset 0 2px $selected_bg_color;

    label,
    image { color: $selected_fg_color; }
  }
}

%greeter_panel_menubar_menuitem {
  // flip underline-indicator vertically
  padding: rem(5.3px, $sw: 1.0) 0 rem(6.7px, $sw: 1.0);
  background-color: transparent;
  &:hover { box-shadow: inset 0 2px $selected_bg_color; }
}

%greeter_panel_menu_menuitem {
  padding: rem(5.3px) rem(8px) rem(6.7px);
  font-weight: 400;
  text-shadow: none;

  &, label { color: $secondary_fg_color; }
  &:hover,
  &:hover label { color: $fg_color; }
  &:disabled,
  &:disabled label { color: $insensitive_fg_color; }
}

%greeter_entry {
  // prevent junmping when showing CapsLock warning
  min-height: rem($widget_size);
  padding: 0 if($ref_weight < 1.0, 4px / 2, 8px / 2);
  font-family: monospace;

  &,
  &:focus {
    color: $inverted_fg_color;
    caret-color: $inverted_fg_color;
  }
  &:disabled { color: $insensitive_inverted_fg_color; }
}

%non_csd_menu {
  margin: unset;
  padding: 1px;
  border-radius: 0;
  border-width: 1px;
  border-style: solid;
  border-color: $menu_highlight_color
                $solid_light_borders_color
                $solid_light_borders_color;
  background-clip: border-box;
}

// gtk-greeter
.lightdm-gtk-greeter {
  // top-panel styling
  #panel_window {
    @extend %greeter_panel_window;

    menubar {
      @extend %greeter_panel_menubar;

      label,
      image {
        padding: 0 rem(6.7px, $sw: 1.0);
        color: $inverted_fg_color;
      }

      > menuitem { @extend %greeter_panel_menubar_menuitem; }

      menu menuitem { @extend %greeter_panel_menu_menuitem; }
    }
  }

  // main container
  #login_window,
  #restart_dialog,
  #shutdown_dialog {
    padding: 0;
    border-style: solid;
    border-width: 11px;
    // no need to be variant-specific, share the same asset instead
    border-image: -gtk-scaled(url("assets/osd-shadow.png"),
                              url("assets/osd-shadow@2.png"))
                  11 / 11px stretch;
    background-color: gtkopacity($inverted_dark_color, 0.9);
    color: $inverted_fg_color;
    box-shadow: none;

    button {
      padding: rem(9.3px, $sw: 1.0)
               rem(13.3px, $sw: 1.0)
               rem(10.7px, $sw: 1.0);
      color: $inverted_secondary_fg_color;
      &:hover,
      &:active { color: $inverted_fg_color; }
      &:disabled { color: $insensitive_inverted_fg_color; }
    }
  }

  @each $node_id_1, $node_id_2, $_color in
  ('#login_window', '#login_button', $suggested_color),
  ('#restart_dialog', '#restart_button', $destructive_color),
  ('#shutdown_dialog', '#shutdown_button', $destructive_color) {

    #{$node_id_1} button#{$node_id_2} {
      background-color: #{$_color};
      color: $secondary_selected_fg_color;
      &:hover {
        @extend %button_hover;
        background-color: #{$_color};
        color: $selected_fg_color;
      }
      &:active {
        @extend %button_active;
        background-color: $selected_bg_color;
        color: $selected_fg_color;
      }
      &:checked {
        background-color: mix($selected_fg_color, $_color, 20%);
      }
      &:disabled {
        @include button(insensitive, transparent,
                                     $insensitive_inverted_fg_color);
      }
    }
  }

  #login_window {
    button.combo {
      min-height: rem($widget_size);
      padding: 0 if($ref_weight < 1.0, 4px, 8px);
      border-image: -gtk-gradient(radial,
                                  center bottom, 0,
                                  center bottom, 0.5,
                                  to($outline_track_color),
                                  to(transparent))
                                  0 0 1 / 0 0 1px;
      color: $inverted_fg_color;
      font-weight: 500;
      &:hover,
      &:active {
        border-image: -gtk-gradient(radial,
                                    center bottom, 0,
                                    center bottom, 0.5,
                                    to($selected_bg_color),
                                    to(transparent))
                                    0 0 2 / 0 0 2px;
        color: $selected_fg_color;
      }
      &:disabled,
      &:checked:disabled {
        border-image: -gtk-gradient(radial,
                                    center bottom, 0,
                                    center bottom, 0.5,
                                    to($outline_track_color),
                                    to(transparent))
                                    0 0 1 / 0 0 1px;
        color: $insensitive_inverted_fg_color;
      }
    }

    entry { @extend %greeter_entry; }

    infobar.error { // notification revealer
      margin: 0 4px; // prevent unwanted overflow
      border: none;
      background-color: transparent;
      color: $error_color;
      font-weight: 700;
      font-size: 110%;
      transition: none; // transition causes visual glitches
    }
  }

  #content_frame { padding-bottom: 14px; }

  #buttonbox_frame {
    padding-top: 8px; // reserve gap between infobar and buttonbox
  }

  // non-CSD context menus
  window.background.popup > menu { @extend %non_csd_menu; }
}

// slick-greeter
$greeter_panel_height: 32px; // pixmap height
$greeter_panel_shadow: 11px; // pixmap shadow region

window.background.lightdm {
  // top-panel
  menubar {  // broken
    @extend %greeter_panel_menubar;
    padding-top: ($greeter_panel_height - $greeter_panel_shadow - $icon_size)
                 / 2;
    font-weight: 700;
    text-shadow: none;

    > menuitem {
      @extend %greeter_panel_menubar_menuitem;
      padding: 0 rem(6.7px, $sw: 1.0);

      label,
      image { color: $inverted_fg_color; }

      &:hover { box-shadow: inset 0 2px $selected_bg_color; }

      label { margin: 0 2px rem(1.3px, $sw: 1.0); }
    }
  }

  window.background.popup > menu {
    @extend %non_csd_menu;

    menuitem  { @extend %greeter_panel_menu_menuitem; }
  }

  button {
    &:not(.option-button):not(.toggle-button) {
      padding: rem(6.7px, $sw: 1.0);
      border-radius: 100px;
      -gtk-outline-radius: 100px;
    }

    &.flat.option-button { // session logo button
      padding: rem(6.7px, $sw: 1.0);
      border-radius: 100px;
      -gtk-outline-radius: 100px;
      color: $inverted_fg_color;

      image { opacity: 0.87; }

      &:hover,
      &:active {
        color: $selected_fg_color;

        image { opacity: 1.0; }
      }
    }

    &, // back arrow
    &.toggle-button { // session list rows
      @extend %button_flat_normal;
      padding: rem(10px) rem(13.3px);
      border-radius: 0;
      -gtk-outline-radius: 0;
      background-color: transparent;
      color: $inverted_fg_color;
      font-size: 110%;
      font-weight: 500;

      label { padding-bottom: rem(1.3px, $sw: 1.0); }

      image { opacity: 0.87; }

      &:hover,
      &:active,
      &.selected {
        image { opacity: 1.0; }
      }

      &:hover {
        @extend %button_flat_hover;
        background-color: transparent;
        color: $selected_fg_color;
      }
      &:active {
        @extend %button_flat_active;
        background-color: transparent;
        color: $selected_fg_color;
      }
    }

    &.toggle-button.selected { // selected row
      @extend %button_flat_normal;
      background-image: image($selected_bg_color);
      &, &:hover {
        color: $selected_fg_color;

        image { opacity: 1.0; }
      }
    }
  }

  entry,
  .lightdm-combo entry { @extend %greeter_entry; }

  entry:active { // for spinner
    -gtk-icon-source: -gtk-icontheme('process-working-symbolic');
    animation: spinner 1s linear infinite;
  }

  .lightdm-combo {
    border-radius: 0;
    background-color: transparent;
  }
}


// /********
//  * Nemo *
//  ********/

.nemo-desktop.nemo-canvas-item {
  color: $selected_fg_color;
  text-shadow: $z-depth-1-label; // non-sense for me
  &:selected { text-shadow: none; }
}

.nemo {
  &-canvas-item { @extend .nautilus-canvas-item; }

  &-list-dim-label { @extend .nautilus-list-dim-label; }
}

.nemo-window {
  // workaround for invisible text in rename entry (Eeleditable.entry)
  .nemo-window-pane scrolledwindow widget > widget.entry {
    &, &:focus {
      transition: none;

      &:selected { // FIXME: selection node doesn't work?
        @extend %selected_items;
      }
    }
  }

  .nemo-inactive-pane .view {
    background-color: $bg_color;
    color: $insensitive_fg_color;
  }

  infobar.error { // Administrative privileges
    label {
      font-size: 110%;
      font-weight: 700;
    }
  }

  // main tool-bar styling
  grid > box > box > toolbar.primary-toolbar {
    // draw bottom border and shadows
    border-bottom: 1px solid $borders_color;
    box-shadow: if($variant == light, $toolbar-shadow-light,
                                      $toolbar-shadow-dark);
  }

  // tweak notebook colour
  grid > paned > box > paned > box > notebook {
    &, > stack:not(:only-child) {
      background-color: $base_color;
    }
  }

  // remove double-border
  grid.vertical > paned.horizontal > box.vertical {
    > scrolledwindow.frame {
      border-width: 0;
    }
  }

  // force using flat-style on bottom bar
  grid.vertical > widget {
    background-color: $secondary_dark_color;
    box-shadow: if($variant=='light', $inline-shadow-light,
                                      $inline-shadow-dark);

    > box { padding: rem(2.7px); }

    > box > button.image-button {
      @extend %button_flat_normal;
      min-width: rem(13.3px);
      min-height: rem(29.3px);
      border-radius: 2px;
      -gtk-outline-radius: 2px;
      padding: 0 rem(10px) 0;
      border-image: -gtk-gradient(radial,
                                  center bottom, 0,
                                  center bottom, 0.001,
                                  to($outline_track_color),
                                  to(transparent))
                                  0 0 0 / 0 0 0px;
      background-color: transparent;
      color: $secondary_fg_color;
      &:hover {
        @extend %button_flat_hover;
        border-image: none;
        background-color: transparent;
        color: $fg_color;
      }
      &:checked {
        @extend %button_flat_checked;
        border-image: -gtk-gradient(radial,
                                    center bottom, 0,
                                    center bottom, 0.5,
                                    to($selected_bg_color),
                                    to(transparent))
                                    0 0 2 / 0 0 2px;
        background-color: transparent;
        color: $fg_color;
        &:disabled {
          @extend %button_flat_checked_disabled;
          border-image: none;
          background-color: transparent;
          color: $insensitive_fg_color;
        }
      }
      &:disabled {
        @extend %button_flat_disabled;
        border-image: none;
        background-color: transparent;
        color: $insensitive_secondary_fg_color;
      }
    }

    box > separator.vertical { // remove separator
      min-width: 0;
      color: transparent;
      background-color: transparent;
    }
  }
}


// /************
//  * Lollypop *
//  ************/

// header grid?
paned.horizontal > paned.horizontal stack grid.vertical > grid.horizontal {
  button.image-button {
    &, &.toggle {
      border-radius: 2px;
      -gtk-outline-radius: 2px;
    }
  }
}

// playlists styling
row.trackrow {
  &, &playing {
    // lollypop can not understand outer marigns
    button.image-button:not(.text-button),
    .track-menu-button { // back to square button
      &, &.toggle { // back to square button
        margin: 0;
        border-radius: 2px;
        -gtk-outline-radius: 2px;
      }
    }
  }
}

// Track menu GtkPopover
// parent container of GtkWidgets 'Ratings' and 'Heart'
grid.popover-rating-loved-grid {
  // tweak bottom margin
  margin-bottom: if($ref_weight < 1.0, calc(12px + 0.35rem),
                                       calc(12px + 0.5rem));
}


// /***************************
//  * Cinnamon-Control-Center *
//  ***************************/

window.background:not(.csd) > box.vertical {
  > stack > scrolledwindow > viewport,
  > scrolledwindow > viewport {
    iconview {
      &, &.view {
        background-color: transparent;
        &:selected {
          @extend %selected_items;

          label { color: $selected_fg_color; }
        }
      }
    }

    box.vertical > toolbar {
      border: none;
      background-color: $bg_color;
      box-shadow: none;

      *:not(button) > label {
        padding: rem(5.3px, $sw: 1.0);
        color: $tertiary_fg_color;
      }
    }

    box.vertical > list {
      &, > row {
        background-image: none;
        background-color: $base_color;
        transition-duration: 0s;
      }

      > row {
        &:hover,
        &:active { // unset hover/active effects
          background-image: none;
          background-color: transparent;
          transition-duration: 0s;
          animation: none;
        }
        &:selected { // use -image instead for >= 3.6.x
          background-image: image($selected_bg_color);
          color: $selected_fg_color;
        }
      }
    }
  }
}

// add extra vertical margins for weird switch node allocation
widget box.horizontal > widget + box.horizontal {
  switch  { margin: rem(5.3px) 0; }
}


// /************************
//  * Cinnamon-Screensaver *
//  ************************/

.csstage {
  .unlockbox {
    color: $inverted_fg_color;
    font-size: 110%;
    font-weight: 400;
  }

  .clock { color: $inverted_fg_color; }

  .toppanel {
    border: none;
    color: $inverted_fg_color;
    background-color: transparent;
  }

  @each $_class, $_radius in (audio, 0 0 2px 0),
                             (info, 0 0 0 2px) {
    .#{$_class}panel { // OSDs placed at top-left/right corners
      border: none;
      border-radius: #{$_radius};
      background-color: gtkopacity($inverted_dark_color, 0.9);
      box-shadow: $z-depth-1;
    }
  }

  .notificationwidget,
  .powerwidget {
    padding: 6px;
    color: $inverted_fg_color;
    background-color: transparent;
    font-size: 100%;
    font-weight: 500;
  }

  .auth-message {
    color: $error_color;
    font-size: 90%;
    font-weight: 700;
  }

  .caps-message {
    color: $warning_color;
    font-size: 90%;
    font-weight: 700;
  }

  .framedimage { // avatar?
    border-radius: 2px;
    border: none;
    background-color: gtkopacity($inverted_fg_color, 0.12);
  }

  .passwordentry {
    @include entry(flat-normal, $c: $inverted_fg_color);
    border-radius: 0;
    caret-color: inherit;
    font-family: monospace;
    &:focus {
      @include entry(flat-focus, $c: $inverted_fg_color);
      caret-color: inherit;
    }
    &:disabled { @include entry(flat-insensitive, $c: $inverted_fg_color); }
    &:backdrop { // for alt-text keyboard layout?
      color: $selected_bg_color;
    }

    image.left {
      margin-right: 8px;
      color: inherit;
    }
  }

  .transparentbutton { // = 'unlock'/'switch-user' button
    border: none;
    background-color: transparent;
    color: $inverted_secondary_accent_label_color;
    &:hover {
      background-color: $track_color;
      color: $inverted_accent_label_color;
    }
    &:active,
    &:checked { color: $inverted_accent_label_color; }
    &:disabled {
      color: gtkopacity($inverted_fg_color, 0.4);
      &:checked {
        color: gtkopacity($inverted_accent_label_color, 0.4);
      }
    }
  }

  .volumeslider {
    min-height: 24px;
    min-width: 100px;
    padding: 3px 0px;
    background-color: gtkopacity($inverted_fg_color, 0.2);
    color: $success_color;
    &:disabled { background-color: gtkopacity($success_color, 0.2); }
  }

  .trackname {
    font-size: 90%;
    color: $inverted_secondary_fg_color;
    background-image: none;
    background-color: transparent;
  }

  .albumartist {
    font-size: 80%;
    color: $inverted_tertiary_fg_color;
    background-image: none;
    background-color: transparent;
  }

  viewport {
    &,
    &.frame {
      border-style: none;
      background-color: transparent;
      background-image: none;
    }
  }
}

// /**************
//  * FeedReader *
//  **************/

window.background > paned.titlebar > headerbar.titlebar {
  button.flat {
    // FIXME: when developer will use .image-button class?
    &:not(.titlebutton):not(.image-button):not(.text-button):not(.toggle) {
      min-width: $icon_size - 2px;
      min-height: $icon_size - 2px;
      margin: rem(5.3px + 2px) 0;
      padding: 0 rem(($widget_size - $icon_size - 2px) / 2);
    }
  }
}

// left-paned haederbar
paned.headerbar_pane.titlebar > headerbar.header_right.titlebar {
  > box.linked.raised > button.toggle { // should be .text-button
    // back to square buttons
    border-radius: 2px;
    -gtk-outline-radius: 2px;
  }
}

// article-list
overlay.article-list > stack {
  > scrolledwindow > viewport.frame > list {
    background-color: $bg_color;

    > row.activatable {
      &:hover { background-color: $track_color; }
      &:selected {
        &,
        &:focus {
          background-color: gtkopacity($selected_bg_color, 0.25);
          &:dir(ltr) { box-shadow: inset 4px 0 $selected_bg_color; }
          &:dir(rtl) { box-shadow: inset -4px 0 $selected_bg_color; }

          label {
            &,
            &.headline-read,
            &.preview { color: $fg_color; }
          }
        }
      }
    }
  }
}

revealer > widget > headerbar.imageOverlay.titlebar {
  > box > button.close.titlebutton { // non-CSD inline-headerbar
    min-width: $icon_size * 1.5;
    min-height: $icon_size * 1.5;
    padding: if($ref_weight < 1.0,
             rem(($widget_size - $icon_size * 1.5 - 2px) / 2),
             rem(($widget_size - $icon_size * 1.5) / 2));
  }
}


// /************
//  * Synaptic *
//  ************/

window > box.vertical > box.horizontal {
  > toolbar {
    background-color: transparent;
    box-shadow: none;

    toolitem > box {
      label,
      entry {
        min-height: rem(13.3px);
        padding-top: rem(1.3px);
        padding-bottom: rem(1.3px);
        font-size: 90%;
      }

      > label { color: $insensitive_fg_color; }
    }
  }

  > widget { background-color: transparent; }
}


// /**********************
//  * Eclipse/SWT (neon) *
//  **********************/

window.background:not(.solid-csd) > box.vertical {
  > scrolledwindow widget > toolbar {
    box-shadow: none; // remove inline-shadows

    button { // hard-coded crazy zero-padding
      min-height: if($ref_weight < 1.0, $icon_size * 1.5, $icon_size * 1.75);
      min-width: if($ref_weight < 1.0, $icon_size * 1.5, $icon_size * 1.75);
      margin: 2px 0;
      border-radius: 2px;
      -gtk-outline-radius: 2px;
    }

    separator { margin: 2px 0; }
  }

  > scrolledwindow > widget > widget {
    border-width: 0 0 1px;
    border-style: none none solid;
    border-color: transparent transparent $solid_light_borders_color;
  }

  scrolledwindow widget > widget > entry,
  scrolledwindow widget > widget > combobox entry {
    // min-height is hard-coded
    padding-top: 0;
    padding-bottom: 0;
  }

  widget > frame > widget > widget > scrolledwindow > textview {
    // override hard-coded crazy rgb(0,0,0)
    text { background-image: image($base_color); }
  }

  scrolledwindow widget > widget {
    > checkbutton check,
    > radiobutton radio { // disable ripple animations
      &:hover,
      &:active,
      &:hover:checked,
      &:hover:indeterminate { animation: none; }
    }
  }
}


// /*******************
//  * Firefox Quantum *
//  *******************/

%_html_button_spacing {
  min-width: unset; // do not set min-width/height
  min-height: unset;
  padding: if($ref_weight < 1.0, 4px 8px 5px, 7px 11px 8px);
}

%_html_entry_spacing {
  min-width: if($ref_weight < 1.0, 24px, 24px + 4px);
  min-height: if($ref_weight < 1.0, 24px, 24px + 4px);
  padding: if($ref_weight < 1.0, 0 4px, 0 7px);
}

%browser_csd_titlebutton {
  // define global titlebutton class sizing
  margin: 0; // unset margins
  padding: 0;
  background-position: center center;
  background-repeat: no-repeat;
  color: transparent; // hide stock icons

  @each $_class, $_suffix1 in ('close', '-close'),
                              ('minimize', '-minimize'),
                              ('maximize', '-maximize') {
    @each $_pseudo, $_suffix2 in ('', ''),
                                 (':hover', '-active'),
                                 (':active', '-active'),
                                 (':backdrop', '-backdrop') {
      &.#{$_class}#{$_pseudo} {
        background-image:
          -gtk-scaled(
            url("assets/window#{$_suffix1}#{$_suffix2}.png"),
            url("assets/window#{$_suffix1}#{$_suffix2}@2.png"));
      }
    }
  }

  &.close {
    &:hover { background-color: $destructive_color; }
    &:active { background-color: $selected_bg_color; }
    &:backdrop:hover {
      background-color: gtkopacity($destructive_color, 0.4);
    }
  }

  &:not(.close) {
    &:hover { background-color: gtkopacity($inverted_fg_color, 0.12); }
    &:active { background-color: gtkopacity($inverted_fg_color, 0.25); }
    &:backdrop:hover {
      background-color: gtkopacity($inverted_fg_color, 0.12 * 0.4);
    }
  }
}

%browser_maxd_csd_titlebutton {
  @each $_pseudo, $_suffix2 in ('', ''),
                               (':hover', '-active'),
                               (':active', '-active'),
                               (':backdrop', '-backdrop') {
    &#{$_pseudo} {
      background-image:
        -gtk-scaled(url("assets/window-unmaximize#{$_suffix2}.png"),
                    url("assets/window-unmaximize#{$_suffix2}@2.png"));
    }
  }
}

#MozillaGtkWidget.background {
  headerbar.titlebar { // >= nightly 60.0a1(2018-02-02)
    // FIXME: no backdrop state, no maximized state, bullshit...
    padding: 0 if($ref_weight < 1.0, (28px - $icon_size * 1.25) / 2,
                                     (28px - $icon_size * 1.5) / 2);

    &.default-decoration button.titlebutton {
      @extend %browser_csd_titlebutton;
      min-width: if($ref_weight < 1.0, $icon_size * 1.25,
                                       $icon_size * 1.5);
      min-height: if($ref_weight < 1.0, $icon_size * 1.25,
                                       $icon_size * 1.5);
    }
  }

  > window.background > menu { // context-menus
    border: unset; // hide ugly double borders
    background-color: $secondary_base_color;

    // revert to standard separators
    > separator {
      padding: if($ref_weight < 1.0, 2px, 3px) // non-scalable units
               0
               if($ref_weight < 1.0, 3px, 4px);
      border-top: // use opaque
        if($ref_weight < 1.0, 2px, 3px) solid $secondary_base_color;
      border-bottom:
        if($ref_weight < 1.0, 3px, 4px) solid $secondary_base_color;
      background-color: $solid_light_borders_color;
    }

    > menuitem > radio:checked {
      -gtk-icon-source: -gtk-scaled(
                        url("assets/radio-checked#{$asset_suffix}.png"),
                        url("assets/radio-checked#{$asset_suffix}@2.png"));
    }
  }

  > widget {
    // 'PageInfo' window's ViewGroup > radio?
    > radiobutton,
    > checkbutton {
      &:focus { outline-width: 0; } // hide outlines
    }

    border { border-color: $solid_light_borders_color; }

    separator { background-color: $solid_light_borders_color; }

    > scrolledwindow > textview text {
      &:selected { @extend %selected_items; }
    }

    > button {
      &, &.combo {
        > button { // enforce fallback buttons inside the HTML pages
          @extend %button_fallback_normal;
          &:hover { @extend %button_fallback_hover; }
          &:active,
          &:checked { @extend %button_fallback_active; }
          &:disabled { @extend %button_fallback_insensitive; }
          &:checked:disabled {
            @extend %button_fallback_checked_insensitive;
          }
        }
      }

      &.combo, // generic button and combo spacing
      & { @extend %_html_button_spacing; }

      // toolbar combo buttons in 'downloads' sub-window
      &:not(.combo) > button { @extend %_html_button_spacing; }
    }

    > entry {
      @extend %_html_entry_spacing;
      // enforce fallback entries inside the HTML pages
      @extend %entry_fallback_normal;
      border-radius: 2px;
      &:focus { @extend %entry_fallback_focus; }
      &:disabled { @extend %entry_fallback_insensitive; }
    }

    > check,
    > radio { // unset all
      min-width: $icon_size;
      min-height: $icon_size;
      margin: 0;
      padding: 0;
      transition: none;
    }
  }
}


// /*************
//  * Wireshark *
//  *************/

window.background {
  > box.vertical > toolbar:not(.primary-toolbar).horizontal {
    border-bottom: 1px solid $borders_color;
    box-shadow: none; // hide fake-shadows
  }

  paned > notebook > stack > scrolledwindow.frame > widget.view {
    // transition causes missing 'selected-items'
    background-image: none;
    transition: none;
    animation: none;
  }
}

// /*******
//  * Eom *
//  *******/

.eom-window {
  statusbar { // always use dark-variant
    margin: 0 -10px; // hide weird lateral gaps
    padding: 0 rem(6.7px);
    background-color: $inverted_bg_color;
    color: $inverted_fg_color;
    box-shadow: $inline-shadow-dark;
  }
}


// /*********
//  * Pluma *
//  *********/

.pluma-window {
  paned.horizontal notebook {
    > header.top { // revive top-border when tabs are shown
      border-top: 1px solid $borders_color;
      background-color: $secondary_dark_color;
      box-shadow: if($variant == light, $inline-shadow-light,
                                        $inline-shadow-dark);
    }
  }

  statusbar {
    margin: 0 -10px; // hide weird lateral gaps
    padding: 0 rem(6.7px);
    background-color: $secondary_dark_color;
    box-shadow: if($variant == light, $inline-shadow-light,
                                      $inline-shadow-dark);

    frame,
    .frame { border-style: none; }
  }

  // side-pane styling
  paned.horizontal box.vertical notebook {
    &.frame { border-style: solid none; }
  }

  // print-preview styling
  .pluma-print-preview toolbar.horizontal {
    border-width: 1px 0;
    border-style: solid none;
    border-color: $borders_color transparent;
    background-color: $secondary_dark_color;
    box-shadow: if($variant == light, $inline-shadow-light,
                                      $inline-shadow-dark);
  }
}


// /*****************
//  * Atril/Xreader *
//  *****************/

.atril-window,
.xreader-window {
  scrolledwindow.frame {
    border-style: solid none none;

    > .view { // = evview?
      transition: none;
      &:selected,
      &:active { @extend %selected_items; }
    }
  }

  toolbar > toolbutton button.flat.image-button { // back to square buttons
    border-radius: 2px;
    -gtk-outline-radius: 2px;
  }

  // 'presentation' mode fullscreen?
  &.fullscreen.background > box.vertical {
    background-color: black; // turn to pitch-black
    transition-duration: 0s; // unset transitions

    // use opaque borders
    > toolbar:not(.primary-toolbar).horizontal {
      border-bottom-color: $solid_light_borders_color;
    }

    // revert to standard backgrounds
    > paned.horizontal { background-color: $bg_color; }
  }
}

// /****************
//  * Libre-Office *
//  ****************/

window.background:not(.solid-csd) {
  // for 'Notebookbar' toolbar
  > notebook:not(.frame) {
    border: 0 none transparent; // unset borders
    background-color: $base_color;

    > stack {
      border: none;
      box-shadow: none;
    }
  }
}


// /************
//  * Inkscape *
//  ************/

// 1st-row toolbar
#CommandsToolbar {
  button.flat.image-button {
    border-radius: 2px;
    -gtk-outline-radius: 2px;
  }
}

// 2nd-row toolbars
box#AuxToolbox {
  border-top: 1px solid $borders_color;

  toolbar {
    min-height: rem(37.3px, $sw: 1.0);
    border: none;
    box-shadow: none;

    button.flat.image-button {
      border-radius: 2px;
      -gtk-outline-radius: 2px;
    }
  }

  box#StyleSwatch { // keep the similar height vs GtkToolBar
    margin: rem(-2.7px) 0;

    label { font-size: if($ref_weight < 1.0, 90%, 100%); }
  }
}

// left/right-side, vertical toolbars
#SnapToolbar,
#ToolToolbar {
  > button,
  > toolitem > button,
  > toolbutton > button { // revert to rectangular buttons
    min-width: rem($icon_size * 2.5);
    min-height: rem($icon_size * 2.5);
    margin: 0;
    padding: 0;
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    &:checked {
      @include button(flat-checked);
      border-image: none;
    }
  }
}

// scrolled colour-palette
#PreviewHolderScroller > viewport.frame {
  padding: 1px 0;
  border-style: solid none; // add fake border to top/bottom
  border-width: 1px 0;
  border-color: transparent;
}

// misc
box#DesktopStatusBar {
  spinbutton { // spinbuttons inside the status-bar
    margin: rem(5.3px, $sw: 1.0) 0;
  }

  combobox { margin: rem(5.3px, $sw: 1.0) 0; }
}

widget > box#DesktopMainTable {
  // stop using circular animations
  // since we can not keep the perfect square allocations
  spinbutton > button {
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    &:hover {
      background-color: $track_color;
      animation: none;
    }
    &:active {
      background-color: $track_color;
      transition: all 0.2s $slope_slow, background-image 0s;
      animation: flat_ripple_effect 0.3s $slope_slow forwards;
    }
  }
}

#DesktopMainTable spinbutton > entry {
  &:dir(ltr) { margin-right: rem(8px); } // gap between entry and buttons
  &:dir(rtl) { margin-left: rem(8px); }
  // workaround for truncated labels in GimpSpinScale
  // FIXME: need to override weird inner-padding?
  padding: 0;

  // re-fit to the parent entry node spacing
  > progress { margin: 0; }
}

#InkscapePanel {
  box#PanelContents,
  box#PaintSelector {
    button {
      &.toggle,
      &.radio {
        min-width: rem($icon_size * 2.5);
        min-height: rem($icon_size * 2.5);
        margin: 0;
        padding: 0;
        border-radius: 2px;
        -gtk-outline-radius: 2px;
        &:checked {
          @include button(flat-checked);
          border-image: none;
          &:disabled { @include button(flat-checked-insensitive); }
        }
      }
    }
  }
}

box#InkSpinScale { // >= 0.92+
  // cover up ugly stock style.css
  border-image: image($bg_color) 2 / 2px;
  box-shadow: inset 0 0 0 999px $bg_color;

  trough {
    &:not(:disabled) { background-color: gtkopacity($accent_color, 0.2); }
  }
}


// /**************
//  * Emacs24/25 *
//  **************/

@each $_version in '', '24' {
  window#Emacs#{$_version} {
    background-color: $bg_color;
    transition: none;

    > box#pane {
      background-color: $bg_color;

      > widget > toolbar#emacs-toolbar {
        background-color: $bg_color;
        transition: none;
      }
    }

    widget#emacs#{$_version} {
      &, > widget { transition: none; }

      > widget {
        > scrollbar {
          background-color: $base_color;

          // scrollbar node width '16px' is hard-coded?
          &.vertical {
            trough {
              border-width: 0 1px 0;
              border-style: solid;
              border-color: $solid_light_borders_color;
            }

            slider { min-width: 16px - (1px * 2); }
          }

          &, * { transition: none; }
        }
      }
    }
  }
}


// /************
//  * Electron *
//  ************/

// workaround for the context-menus in Electron apps
// do not use the alpha-blended colours
window.popup:not(.csd) {
  menu {
    background-color: $secondary_base_color;

    menuitem {
      background-color: $secondary_base_color;
      color: mix($fg_color, $secondary_base_color, 87%);
      &:hover {
        background-color: mix($fg_color, $secondary_base_color, 12%);
        color: $fg_color;
      }
      &:disabled { // popup frame pulls this?
        background-color: $secondary_base_color;
        color: mix($fixed_fg_color, $secondary_base_color, 28%);

        label, // reset for generic non-composited Gtk+ apps
        arrow { color: mix($fg_color, $secondary_base_color, 28%); }
      }
    }
  }
}


// /********************
//  * Transmission-Gtk *
//  ********************/

window.background:not(.solid-csd) > box.vertical > grid.horizontal {
  > button.flat:not(.image-button),
  > button.flat.image-button.toggle {
    // set min-limits for rectangular images
    > image,
    > widget > box.horizontal > image {
      min-width: 20px;
      min-height: 20px;
    }
  }

  // add spacing for 'Ratio' label
  > label { padding: 0 rem(5.3px, $sw: 1.0) rem(1.3px, $sw: 1.0); }
}


// /**************************
//  * Remmina Remote Desktop *
//  **************************/

window.background:not(.solid-csd) {
  // inline headerbar
  > box.vertical > headerbar:not(.titlebar) {
    > box.horizontal {
      > entry,
      > entry.default { // .default is added when focused only? crazy...
        // always use inverted colours
        color: $inverted_secondary_fg_color;
        caret-color: $inverted_secondary_fg_color;
        &:focus {
          color: $inverted_fg_color;
          caret-color: $inverted_fg_color;
        }
        &:disabled { color: $insensitive_inverted_secondary_fg_color; }
      }

      // hide unneeded separator
      > separator { background-color: transparent; }
    }
  }
}


// /***********
//  * Synapse *
//  ***********/

window.background:not(.solid-csd) > box.vertical {
  > widget widget,
  > box.vertical widget {
    &:selected { // selected-row?
      @extend %selected_items;
    }
  }
}


// /*******************
//  * MySQL-Workbench *
//  *******************/

window#wb_main_window {
  notebook#model_tabs {
    > header.top {
      background-color: $inverted_dark_color;

      tabs {
        arrow {
          color: $inverted_tertiary_fg_color;
          &:hover,
          &:active { color: $inverted_fg_color; }
          &:disabled { color: transparent; }
        }

        tab {
          &,
          label,
          button.flat { color: $inverted_tertiary_fg_color; }

          &:hover,
          &:checked {
            &,
            label,
            button.flat { color: $inverted_fg_color; }

            > image { background-color: $inverted_fg_color; }
          }
          &:disabled {
            &,
            label,
            button.flat { color: $insensitive_inverted_fg_color; }
          }

          > image { // 'Home' icon
            min-height: $icon_size;
            min-width: $icon_size;
            padding: rem(4px, $sw: 1.0);
            border-radius: 2px;
            background-color: $inverted_tertiary_fg_color;
          }
        }
      }
    }

    > stack > box.vertical > menubar { margin: 0 -1px; } // hide weird gap
  }

  box#dbquery,
  box#db.query.QueryBuffer,
  paned.vertical > box.horizontal > box.vertical > box.horizontal,
  notebook#model_tabs > stack > box.vertical > box.horizontal {
    border-bottom: 1px solid $borders_color;
  }

  button.flat.image-button { // revert to square
    margin: rem(5.3px) 0; // add vertical spacing
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    &.toggle:checked {
      border-image: -gtk-gradient(radial,
                                  center bottom, 0,
                                  center bottom, 0.5,
                                  to($selected_bg_color),
                                  to(transparent))
                                  0 0 2 / 0 0 2px;
      background-color: transparent;
    }
  }

  box.horizontal > combobox { margin: rem(5.3px) 0; } // add vertical spacing

  entry#find { margin: rem(5.3px) 0; } // add vertical spacing

  treeview.view {
    background-color: $base_color;
    transition: none;
    &:selected { // enforce standard selection styling
      &, &:focus { @extend %selected_items; }
    }
  }
}


// /***************
//  * Chrome(ium) *
//  ***************/

window.background.chromium {
  // checked-tab & toolbar & button widgets
  background-color: if($variant == light, $bg_color, $base_color);
  color: if($variant == light, $secondary_fg_color, $fg_color);

  menubar,
  headerbar.titlebar {
    // foregrounds for inactive tabs and new-tab button in Refresh-mode
    color: mix($inverted_fg_color, $inverted_dark_color, 54%); // >= 69.0.3497
  }

  headerbar.titlebar {
    button.toggle { // account-button (> 64.0.3282?)
      border-radius: 2px; // back to text-button radius
      &:active { // use chromium-style toggled backgrounds
        background-color: gtkopacity($inverted_fg_color, 0.25);
      }
    }

    // from nav_button_provider_gtk3.cc (> 62.0.3202?)
    button.titlebutton { // title-buttons
      @extend %browser_csd_titlebutton;
      min-width: $icon_size; // > 16px causes image blurring
      min-height: $icon_size;
    }
  }

  // for unmaximize(restore) titlebutton
  &.maximized headerbar.titlebar button.titlebutton.maximize {
    @extend %browser_maxd_csd_titlebutton;
  }

  // FIXME: not for actual button widgets but for toolbar's separators
  // crazy: src/+/master/chrome/browser/ui/libgtkui/gtk_ui.cc#891
  button { // for active-tab borders
    border-width: 1px;
    border-style: solid;
    border-color: $solid_light_borders_color;
  }

  entry.chromium {
    &, &:focus { // overrides standard borders
      border-image: none;
      border: 1px solid $borders_color;
    }
  }

  // internal region of toolbar's entry widget
  > textview.view { background-color: $light_color; }
}


// /*********
//  * Tilix *
//  *********/

headerbar > box.horizontal.linked {
  > button.toggle.session-sidebar-button { // left-most revealer button
    min-height: $icon_size;
    padding-top: rem(($widget_size - $icon_size - 2.7px) / 2);
    padding-bottom: rem(($widget_size - $icon_size - 2.7px) / 2);
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    font-weight: 700;

    > box { // reduce the gap between label and image
      > label {
        margin: rem(-2px) 0;
        &:dir(ltr) { padding: 0 rem(1.3px) 0 rem(4px); }
        &:dir(rtl) { padding: 0 rem(4px) 0 rem(1.3px); }
      }

      > image { // down-arrow
        &:dir(ltr) { padding: 0 rem(4px) 0 rem(1.3px); }
        &:dir(rtl) { padding: 0 rem(1.3px) 0 rem(4px); }
      }
    }
  }

  > button.image-button.session-new-button { // 'plus' button
                                             // hard-coded 2px lateral-padding
    min-width: $icon_size * 1.5 - 2px * 2;

    // make spacing gap between "View Session Sidebar" button and this
    &:dir(ltr) { margin-left: 8px; }
    &:dir(rtl) { margin-right: 8px; }

    > widget > box > image { // add actual lateral spacing
      min-width: $icon_size * 1.5 - 2px * 2;
      padding: if($ref_weight < 1.0,
               0 rem(($widget_size - $icon_size * 1.5 - 2px) / 2),
               0 rem(($widget_size - $icon_size * 1.5) / 2));
    }
  }
}

headerbar.titlebar > stack {
  > widget > label.title { // stack title
    margin-bottom: rem(5.3px - 1.3px);
  }

  > box.linked > entry { // unset vertical padding
    padding-top: 0;
    padding-bottom: 0;
  }
}

// left-side revealer
window.background > overlay > revealer { // parent container
  @each $_position, $_side_margin in (left, right),
                                     (right, left) {
    &.#{$_position} > scrolledwindow.frame {
      margin-#{$_side_margin}: 16px;
      border: none;
      box-shadow: $z-depth-3; // depth-4 is semamtically right,
                              // but too deep
    }
  }
}

list.tilix-session-sidebar {
  // use -image property instead
  background-image: image($secondary_dark_color);

  button.tilix-sidebar-close-button {
    min-height: 20px;
    min-width: 20px;
    padding: 0;
    color: gtkopacity($destructive_color, 0.87);
    &:hover,
    &:active,
    &:checked { color: $destructive_color; }
  }
}

// in-line titlebars
widget > box.terminal-titlebar {
  > button.flat.popup.toggle {
    &:dir(ltr) { padding: 0 rem(13.3px) 0 0; }
    &:dir(rtl) { padding: 0 0 0 rem(13.3px); }

    &:checked {
      border-image: -gtk-gradient(radial,
                                  center bottom, 0,
                                  center bottom, 0.5,
                                  to($selected_bg_color),
                                  to(transparent))
                                  0 0 2 / 0 0 2px;
      background-color: transparent;
    }

    label.tilix-terminal-title {
      // move button padding into label node
      padding: rem(9.3px) rem(13.3px) rem(10.7px);
      color: $secondary_fg_color;
      font-weight: 700;
      &:disabled { color: $insensitive_fg_color; }
      &:not(:disabled) {
        border-image: -gtk-gradient(radial,
                                    center bottom, 0,
                                    center bottom, 0.5,
                                    to($selected_bg_color),
                                    to(transparent))
                                    0 0 2 / 0 0 2px;
      }
    }

    &:hover,
    &:active,
    &:checked {
      &, label.tilix-terminal-title {
        &, &:disabled { color: $fg_color; }
      }
    }
  }

  > button.image-button { // 'plus' and 'close'
    &, &.toggle {
      margin: rem(2.7px) 0;
      padding: rem(10px - 2.7px);
      border-radius: 2px;
      -gtk-outline-radius: 2px;
    }
  }

  &.compact { // 'Small' option
    > button.flat.popup.toggle {
      &:dir(ltr),
      &:dir(rtl) { padding: 0; }

      label.tilix-terminal-title {
        padding: rem(1.3px, $sw: 1.0) rem(2.7px) rem(2.7px, $sw: 1.0);
      }
    }

    > button.image-button {
      &, &.toggle {
        margin: 0;
        padding: rem(2.7px, $sw: 1.0);
      }
    }
  }
}

// tab 'close' button when 'use tabs instead of sidebars'
notebook.tilix-background tab.reorderable-page button.tilix-small-button {
  // hard-coded 2px padding
  min-width: 0;
  min-height: 0;

  > widget > box > image {
    margin: 0 -2px;
    padding: rem(6.7px - 2.7px);
  }
}


// /********
//  * PSPP *
//  ********/

// upstream should convert this to treeview node
notebook.psppire-data-editor widget.view {
  border-radius: 0; // unset roundness of cells

  entry { // = editable cell
    &,
    &:focus {
      min-width: unset;
      min-height: unset;
      padding: 0 2px;
      border-image: none;
      border-color: $selected_bg_color;
      background-color: $light_color;
      transition: none;
      &:dir(ltr) { border-left-width: 2px; }
      &:dir(rtl) { border-right-width: 2px; }
    }
  }

  button:not(.flat) { // = column_header buttons
    @extend %column_header_button;
  }
}


// /************
//  * Ubiquity *
//  ************/

window#live_installer {
  widget#title_eventbox.menubar { // title header container
    font-weight: 700;

    label#page_title,
    image#page_logo { color: $inverted_fg_color; }
  }

  widget#progress_eventbox.menubar { // bottom container
    color: $inverted_fg_color;

    expander {
      title {
        label,
        arrow {
          color: $inverted_secondary_fg_color;
          &:hover,
          &:active { color: $inverted_fg_color; }
          &:disabled { color: $insensitive_inverted_fg_color; }
        }
      }

      textview.view { // scrolled text-views
        &, > text {
          background-color: $base_color;
          color: $fg_color;
          caret-color: $fg_color;
        }
      }
    }

    // 4px from <data>
    progressbar trough { border-radius: 4px; }
  }
}


// /*********
//  * Pamac *
//  *********/

// toggle buttons in the buttonbox!? non-sense at all...
buttonbox.vertical > button.toggle {
  @each $b_type, $b_color in (suggested, $selected_bg_color),
                             (destructive, $destructive_color) {
    &.#{$b_type}-action:checked {
      background-image: none;
      background-color: mix($selected_fg_color, $b_color, 20%);
      color: $selected_fg_color;
      &:hover {
        background-image: none;
        background-color: $b_color;
        color: $selected_fg_color;
      }
    }
  }
}

// left-pane
box.vertical > stack > box > revealer > stack > scrolledwindow {
  > viewport.frame > list {
    @extend %sidebar_template;
    &:dir(ltr) { border-right: 1px solid $borders_color; }
    &:dir(rtl) { border-left: 1px solid $borders_color; }

    > row.activatable {
      &:selected {
        background-color: transparent;
        &:hover { background-image: image($track_color); }

        &, label { color: $selected_bg_color; }
      }

      > label { font-weight: 500; }
    }
  }
}


// /*********
//  * Geany *
//  *********/

window#GeanyMainWindow {
  toolbar#GeanyToolbar { border-bottom: 1px solid $borders_color; }

  paned.vertical {
    > notebook.frame { // bottom-frame
      &:dir(ltr) { border-width: 0 0 1px 1px; }
      &:dir(rtl) { border-width: 0 1px 1px 0; }

      treeview.view:selected {
        background-color: $track_color;
        color: $selected_bg_color;
      }
    }

    paned.horizontal > notebook.frame {
      border: none; // remove double borders around the L/R panes

      > stack > scrolledwindow { // left-pane
        @extend %sidebar_template;

        // Geany overrides theme's font settings anyway
        treeview.view { @extend %sidebar_treeview; }
      }
    }
  }
}

